#!/bin/bash
#
#  Completion for mycmd:
#
#

function go
{
    cd $(mycmd "go" "$1" "$2")
}

function install
{
    adb install $(mycmd "install" "$1" "$2")
}

function flash
{
    mycmd "flash" "$1" "$2" "$3" "$4"
}

function cscope-with-java-mk
{
    CSCOPE_FILE=cscope.out
    if [ -n "$1" ]; then
	echo "Source code directory: " $1
	echo "Create file map : " $CSCOPE_FILE
	find $1 -name "*.h" -o -name "*.c" -o -name "*.cpp" -o -name "*.java" -o -name "*.mk" -o -name "Makefile" -o -name "Kconfig"> $CSCOPE_FILE
	cscope -bkq -i $CSCOPE_FILE
	# cscope -Rbkq
	ctags -R
    else
	echo "Please key-in path of project"
    fi
}

function cscope-with-java-mk-xml
{
    CSCOPE_FILE=cscope.out
    if [ -n "$1" ]; then
	echo "Source code directory: " $1
	echo "Create file map : " $CSCOPE_FILE
	find $1 -name "*.h" -o -name "*.c" -o -name "*.cpp" -o -name "*.java" -o -name "*.mk" -o -name "Makefile" -o -name "Kconfig" -o -name "*.xml"> $CSCOPE_FILE
	cscope -bkq -i $CSCOPE_FILE
	# cscope -Rbkq
	ctags -R
    else
	echo "Please key-in path of project"
    fi
}

function cscope-with-java-mk-dts
{
    CSCOPE_FILE=cscope.out
    if [ -n "$1" ]; then
	echo "Source code directory: " $1
	echo "Create file map : " $CSCOPE_FILE
	find $1 -name "*.h" -o -name "*.c" -o -name "*.cpp" -o -name "*.java" -o -name "*.mk" -o -name "Makefile" -o -name "Kconfig" -o -name "*.dts" -o -name "*.dtsi"> $CSCOPE_FILE
	cscope -bkq -i $CSCOPE_FILE
	# cscope -Rbkq
	ctags -R
    else
	echo "Please key-in path of project"
    fi
}

function cscope-with-python-mk
{
    CSCOPE_FILE=cscope.out
    if [ -n "$1" ]; then
	echo "Source code directory: " $1
	echo "Create file map : " $CSCOPE_FILE
	find $1 -name "*.py" -o -name "*.mk" -o -name "Makefile" > $CSCOPE_FILE
	cscope -bkq -i $CSCOPE_FILE
	# cscope -Rbkq
	ctags -R
    else
	echo "Please key-in path of project"
    fi
}

_go()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    first=$(mycmd "go_completion" "")
    second=$(mycmd "go_completion" "subdir")

    case "${prev}" in
	go)
            COMPREPLY=( $(compgen -W "${first}" ${cur}) )
            return 0
            ;;
        *)
	    COMPREPLY=( $(compgen -W "${second}" ${cur}) )
            return 0
            ;;
    esac

#    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
}
complete -F _go go

_install()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=$(mycmd "install_completion" "")

    case "${prev}" in
        install)
	    COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
            return 0
            ;;
    esac
}
complete -F _install install

_flash()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=$(mycmd "flash_completion" "${prev}")

    COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
}
complete -F _flash flash
